/*
 * -------------------------------------------------
 *  nf-core/imputation Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  // TODO nf-core: Check the defaults for all processes
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  // NOTE - Only one of the labels below are used in the fastqc process in the main script.
  //        If possible, it would be nice to keep the same label naming convention when
  //        adding in your processes.
  // TODO nf-core: Customise requirements for specific processes.
  // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
  withLabel:process_low {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 14.GB * task.attempt, 'memory' ) }
    time = { check_max( 6.h * task.attempt, 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 6 * task.attempt, 'cpus' ) }
    memory = { check_max( 42.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 12 * task.attempt, 'cpus' ) }
    memory = { check_max( 84.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h * task.attempt, 'time' ) }
  }
  withLabel:process_long {
    time = { check_max( 20.h * task.attempt, 'time' ) }
  }

  withName: AdjustGwasFile {
    memory = { check_max( 30.GB * task.attempt, 'memory' ) }
    cpus = 8
    time = { check_max( 30.m * task.attempt, 'time' ) }
    clusterOptions = '--job-name=AdjustGwasFile'
  }

  withName: FindRegions {
    memory = { check_max( 30.GB * task.attempt, 'memory' ) }
    cpus = 8
    time = { check_max( 30.m * task.attempt, 'time' ) }
    clusterOptions = '--job-name=FindRegions'
  }

  withName: SubsetGwas {
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    cpus = 4
    time = { check_max( 20.m * task.attempt, 'time' ) }
    clusterOptions = '--job-name=SubsetGwas'
  }

   withName: DownloadEqtl {
    memory = { check_max( 200.MB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 5.m * task.attempt, 'time' ) }
    clusterOptions = '--job-name=DownloadEqtl'
  }

  withName: RunHyprColoc {
    memory = { check_max( 5.GB * task.attempt, 'memory' ) }
    cpus = 1
    time = { check_max( 15.m * task.attempt, 'time' ) }
    clusterOptions = '--job-name=RunHyprColoc'
  }

  withName: SampleOverlapMatrix {
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    cpus = 4
    container = 'quay.io/cawarmerdam/eqtlgen_phase2:latest'
    time = { check_max( 15.m * task.attempt, 'time' ) }
    clusterOptions = '--job-name=SampleOverlap'
  }

  withName: AdjustPQtlFile {
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
      cpus = 4
      container = 'quay.io/repository/eqtlgen/eqtlgen_phase2:v1.9'
      time = { check_max( 15.m * task.attempt, 'time' ) }
      clusterOptions = '--job-name=ComparePqtlAndEqtl'
    }

  withName: ComparePQtlAndEQtl {
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    cpus = 4
    container = 'quay.io/repository/eqtlgen/eqtlgen_phase2:v1.9'
    time = { check_max( 15.m * task.attempt, 'time' ) }
    clusterOptions = '--job-name=ComparePqtlAndEqtl'
  }

  withName: ExtractGenesForPQtlAnalysis {
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    cpus = 4
    container = 'quay.io/cawarmerdam/eqtlgen_phase2:latest'
    time = { check_max( 1.h * task.attempt, 'time' ) }
    clusterOptions = '--job-name=ExtractGenesForPQtlAnalysis'
  }

}
